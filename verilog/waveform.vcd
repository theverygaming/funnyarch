$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 N address [31:0] $end
  $var wire  1 J clk $end
  $var wire 32 L data [31:0] $end
  $var wire  1 M data_rw $end
  $var wire  1 K reset $end
  $scope module cpu $end
   $var wire 32 N address [31:0] $end
   $var wire 32 T alu_in1 [31:0] $end
   $var wire 32 U alu_in2 [31:0] $end
   $var wire  4 S alu_opcode [3:0] $end
   $var wire 32 V alu_out [31:0] $end
   $var wire  1 J clk $end
   $var wire 32 L data [31:0] $end
   $var wire  1 M data_rw $end
   $var wire 32 & read_data0 [31:0] $end
   $var wire 32 ' read_data1 [31:0] $end
   $var wire 32 % read_data_rf [31:0] $end
   $var wire 32 $ read_data_rip [31:0] $end
   $var wire  5 # read_reg0 [4:0] $end
   $var wire  5 P read_reg1 [4:0] $end
   $var wire  1 K reset $end
   $var wire  1 O w_enable0 $end
   $var wire 32 R write_data0 [31:0] $end
   $var wire 32 % write_data_rf [31:0] $end
   $var wire 32 $ write_data_rip [31:0] $end
   $var wire  5 Q write_reg0 [4:0] $end
   $scope module alu $end
    $var wire 32 T in1 [31:0] $end
    $var wire 32 U in2 [31:0] $end
    $var wire  4 S opcode [3:0] $end
    $var wire 32 V out [31:0] $end
   $upscope $end
   $scope module ctrl $end
    $var wire 32 N address [31:0] $end
    $var wire 32 T alu_op1 [31:0] $end
    $var wire 32 U alu_op2 [31:0] $end
    $var wire  4 S alu_opcode [3:0] $end
    $var wire 32 V alu_out [31:0] $end
    $var wire  1 J clk $end
    $var wire 32 L data_in [31:0] $end
    $var wire 32 W data_out [31:0] $end
    $var wire  1 M data_rw $end
    $var wire 32 ( instr [31:0] $end
    $var wire 32 & read_data0 [31:0] $end
    $var wire 32 ' read_data1 [31:0] $end
    $var wire  5 # read_reg0 [4:0] $end
    $var wire  5 P read_reg1 [4:0] $end
    $var wire  1 K reset $end
    $var wire 32 % rf_r [31:0] $end
    $var wire 32 % rf_w [31:0] $end
    $var wire 32 $ rip_r [31:0] $end
    $var wire 32 $ rip_w [31:0] $end
    $var wire  2 ) state [1:0] $end
    $var wire  1 O w_enable0 $end
    $var wire 32 R write_data0 [31:0] $end
    $var wire  5 Q write_reg0 [4:0] $end
   $upscope $end
   $scope module regs $end
    $var wire  1 J clk $end
    $var wire 32 X i [31:0] $end
    $var wire 32 & read_data0 [31:0] $end
    $var wire 32 ' read_data1 [31:0] $end
    $var wire 32 % read_data_rf [31:0] $end
    $var wire 32 $ read_data_rip [31:0] $end
    $var wire  5 # read_reg0 [4:0] $end
    $var wire  5 P read_reg1 [4:0] $end
    $var wire 32 * regarr[0] [31:0] $end
    $var wire 32 4 regarr[10] [31:0] $end
    $var wire 32 5 regarr[11] [31:0] $end
    $var wire 32 6 regarr[12] [31:0] $end
    $var wire 32 7 regarr[13] [31:0] $end
    $var wire 32 8 regarr[14] [31:0] $end
    $var wire 32 9 regarr[15] [31:0] $end
    $var wire 32 : regarr[16] [31:0] $end
    $var wire 32 ; regarr[17] [31:0] $end
    $var wire 32 < regarr[18] [31:0] $end
    $var wire 32 = regarr[19] [31:0] $end
    $var wire 32 + regarr[1] [31:0] $end
    $var wire 32 > regarr[20] [31:0] $end
    $var wire 32 ? regarr[21] [31:0] $end
    $var wire 32 @ regarr[22] [31:0] $end
    $var wire 32 A regarr[23] [31:0] $end
    $var wire 32 B regarr[24] [31:0] $end
    $var wire 32 C regarr[25] [31:0] $end
    $var wire 32 D regarr[26] [31:0] $end
    $var wire 32 E regarr[27] [31:0] $end
    $var wire 32 F regarr[28] [31:0] $end
    $var wire 32 G regarr[29] [31:0] $end
    $var wire 32 , regarr[2] [31:0] $end
    $var wire 32 H regarr[30] [31:0] $end
    $var wire 32 I regarr[31] [31:0] $end
    $var wire 32 - regarr[3] [31:0] $end
    $var wire 32 . regarr[4] [31:0] $end
    $var wire 32 / regarr[5] [31:0] $end
    $var wire 32 0 regarr[6] [31:0] $end
    $var wire 32 1 regarr[7] [31:0] $end
    $var wire 32 2 regarr[8] [31:0] $end
    $var wire 32 3 regarr[9] [31:0] $end
    $var wire  1 K reset $end
    $var wire  1 O w_enable0 $end
    $var wire 32 R write_data0 [31:0] $end
    $var wire 32 % write_data_rf [31:0] $end
    $var wire 32 $ write_data_rip [31:0] $end
    $var wire  5 Q write_reg0 [4:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
0J
1K
b00000000000000000000000000000000 L
0M
b00000000000000000000000000000000 N
0O
b00000 P
b00000 Q
b00000000000000000000000000000000 R
b0000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
#1
b00000000000000000000000000000001 $
b00000000000000000000000000000001 (
b10 )
b00000000000000000000000000000001 H
1J
b00000000000000000011110000000010 L
#2
0J
0K
#3
b00 )
1J
#4
0J
#5
b00000000000000000000000000000101 $
b01 )
b00000000000000000000000000000101 H
1J
#6
0J
#7
b11110 #
b00000000000000000000000000000000 $
b00000000000000000011110000000010 (
b00 )
b00000000000000000000000000000000 H
1J
#8
0J
#9
b00000000000000000000000000000100 $
b00000000000000000000000000000100 &
b01 )
b00000000000000000000000000000100 H
1J
#10
0J
#11
b00 )
1J
#12
0J
#13
b00000000000000000000000000001000 $
b00000000000000000000000000001000 &
b01 )
b00000000000000000000000000001000 H
1J
b00000000000000000000000000000100 N
#14
0J
#15
b00 )
1J
#16
0J
#17
b00000000000000000000000000001100 $
b00000000000000000000000000001100 &
b01 )
b00000000000000000000000000001100 H
1J
b00000000000000000000000000001000 N
#18
0J
